#!/usr/bin/env python3
import argparse
import os
import os.path
from copy import deepcopy
from tcss455group7 import baseline
from tcss455group7.image_gender_classifier import image_gender_classifier
from tcss455group7.text_classifiers.text_gender_classifier import text_gender_classifier
from tcss455group7.text_classifiers.text_personality_classifier import text_personality_classifier
from tcss455group7.likes_gender_classifier import likes_gender_classifier
from tcss455group7.likes_age_classifier import likes_age_classifier
from tcss455group7 import user as User
import pickle

parser = argparse.ArgumentParser(description='455team7 project')
parser.add_argument('-i', help='input directory', type=str)
parser.add_argument('-o', help='output directory', type=str)
parser.add_argument('--train', help='training mode', action='store_true')
args = parser.parse_args()

TRAINED_MODEL_PATH = '/data/.baseline'
PROFILE_FILE_NAME = 'profile/profile.csv'

def test(**kwargs):
    input_dir = kwargs['input_dir']
    output_dir = kwargs['output_dir']

    print('Testing Mode')
    print("Selected input directory: %s" % (input_dir))
    print("Selected output directory: %s" % (output_dir))

    baseline = get_baseline()

    # # # # # # # # GENDER CLASSIFIERS# # # # # # # # 
    # image_model_predictions = image_gender_classifier().test(input_dir=input_dir)
    # text_model_predictions = text_gender_classifier().test(input_dir=input_dir)
    # like_model_predictions = likes_gender_classifier().test(input_dir=input_dir) 
    
    # # # # # # # # AGE FOR LIKE CLASSIFIERS# # # # # # # # 
    age_model_predictions = likes_age_classifier().test(input_dir=input_dir) 

    # # # # # # # # PERSONALITY CLASSIFIER# # # # # # # # 
    personality_predictions = text_personality_classifier().test(input_dir=input_dir)
    

    users = parse_profile_csv(input_dir)
    for user in users:
        prediction = deepcopy(baseline)
        id = user.id()
        prediction.id(id=id)

        # inject image model prediction
        # if (id in image_model_predictions):
        #     gender = image_model_predictions[id]['gender']
        #     prediction.set(gender=gender)

        # inject likes model prediction
#         if (id in like_model_predictions):
#             gender = like_model_predictions.get(id)
#             genderValue = "female"
#             if (gender < 1.0):
#                 genderValue = "male"
#             prediction.set(gender=genderValue)
            
#       inject likes based age prediction
        if (id in age_model_predictions):
            agePrediction = age_model_predictions.get(id)
            prediction.set(age=agePrediction)
    
#       classifying personality traits using text
        predictPersonality(personality_predictions, prediction, id)

        xml_str = prediction.to_xml()
        with open(os.path.join(output_dir, "%s.xml" % id), 'wb+') as xml_file_handle:
            xml_file_handle.write(xml_str)

def get_baseline():
    with open(TRAINED_MODEL_PATH, 'rb') as model_file:
        baseline = pickle.load(model_file)
    return baseline

def predictGender(image_model_predictions, text_model_predictions, 
                like_model_predictions, prediction, id):

    gender_prediction = None
    if (id in like_model_predictions):
        genderLikes = like_model_predictions.get(id)
        gender_prediction = "female"
        if (genderLikes < 1.0):
            gender_prediction = "male"

    if (id in image_model_predictions):
        genderImage = image_model_predictions[id]['gender']
        if (genderImage == gender_prediction):
            prediction.set(gender=gender_prediction)
            return
        else:
            if (id in text_model_predictions):
                genderText = text_model_predictions.get(id)
                if (genderText < 1.0 and gender_prediction == "male"):
                    prediction.set(gender=gender_prediction)
                else:
                    gender_prediction = "female"
                    prediction.set(gender=gender_prediction)
                    return
                    
def predictPersonality(personality_predictions, prediction, id):
    if id in personality_predictions:
        traits = personality_predictions.get(id)
        prediction.set(con=traits.get("con"))
        prediction.set(neu=traits.get("neu"))
        prediction.set(ext=traits.get("ext"))
        prediction.set(agr=traits.get("agr"))
        prediction.set(ope=traits.get("ope"))

def parse_profile_csv(input_dir):
    file_name = os.path.join(input_dir, PROFILE_FILE_NAME)
    users = []
    with open(file_name) as file_handle:
        lines = iter(file_handle)
        header = next(lines).strip().split(',')[1:]
        for line in lines:
            row = line.strip().split(',')[1:]
            attributes = {}
            for i in range(0, len(header)):
                k = header[i]
                v = row[i]
                attributes[k] = v
            user = User.user(**attributes)
            users.append(user)
    return users

if (args.i == None or
        (not args.train and args.o == None)
        ):
    parser.print_help()
    exit()

if (args.i == args.o):
    print('Input and output directories should not be the same')
    exit()

if (not os.path.exists(args.i)):
    print('Input directory does not exist')
    exit()

if (os.path.isfile(args.i) or
        (not args.train and os.path.isfile(args.o))
        ):
    print('Input or output directory is not a directory.')
    exit()

if (not args.train and not os.path.exists(args.o)):
    print('Output directory does not exist. Will make a new directory')
    os.makedirs(args.o)

test(input_dir=args.i, output_dir=args.o)
